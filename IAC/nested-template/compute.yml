AWSTemplateFormatVersion: 2010-09-09
Description: A Template to define Venafi ec2 deployment in AWS.
  - Not intended for multi-region deployments. 

Parameters: 
  ApplicationName:
    Type: String
    Default: nested-stack
  EnvironmentClass:
    Type: String
    Default: STG
  AMIIdentifier:
    Type: AWS::EC2::Image::Id
    Default: "ami-0245d318c6788de52"
  EC2InstanceType: 
    Type: String
    Default: t2.large
  EC2KeyName: 
    Type: String
    Default: "isen1-usw1-kp"
  EC2VPCSubNetIds:
    Type: CommaDelimitedList
    Default: "subnet-097d4c07ade875bc2,subnet-0a20ce4761d080884"
  ALBVPCSubNetIds:
    Type: CommaDelimitedList
    Default: "subnet-1d656b46,subnet-3dff0d5b"
  VPCId: 
    Type: String
    Default: "vpc-527f7c35"
  InternetAccessible:
    Type: String
    Default: internet-facing
    AllowedValues: 
      - internet-facing
      - internal
  HTTPSCertificateARN:
    Type: String
    Default: 'arn:aws:acm:us-west-1:805262168568:certificate/68a11a31-260c-4dbc-8314-b46bb705f00e'
Resources: 

  EC2AZ1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref AMIIdentifier
      InstanceInitiatedShutdownBehavior: 'stop'
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2KeyName
      Monitoring: true
      SecurityGroupIds:
        - !GetAtt EC2FleetSecurityGroup.GroupId
      SubnetId: !Select [ 0 , !Ref EC2VPCSubNetIds ]
      Tags:
        - Key: ApplicationName
          Value: !Ref ApplicationName
        - Key: EnvironmentClass
          Value: !Ref EnvironmentClass

  EC2AZ2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref AMIIdentifier
      InstanceInitiatedShutdownBehavior: 'stop'
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2KeyName
      Monitoring: true
      SecurityGroupIds:
        - !GetAtt EC2FleetSecurityGroup.GroupId
      SubnetId: !Select [ 1 ,!Ref EC2VPCSubNetIds ]
      Tags:
        - Key: ApplicationName
          Value: !Ref ApplicationName
        - Key: EnvironmentClass
          Value: !Ref EnvironmentClass

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: !Ref ALBVPCSubNetIds
      Scheme: !Ref InternetAccessible
      Tags:
        - Key: ApplicationName
          Value: !Ref ApplicationName
        - Key: EnvironmentClass
          Value: !Ref EnvironmentClass
    
  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - Type: redirect
          RedirectConfig: 
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP


  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates: #Needs to be provided to Amazon Certificate Manager
       - CertificateArn: !Ref HTTPSCertificateARN
      DefaultActions:
        - TargetGroupArn: !Ref ALBHTTPSTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS

  ALBHTTPSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref VPCId
      Targets:
        - Id: !Ref EC2AZ1
        - Id: !Ref EC2AZ2
      HealthCheckEnabled: true
      HealthCheckPath: /vedadmin
      HealthCheckProtocol: HTTPS
      Matcher:
        HttpCode: 200,301
      Tags:
      - Key: EnvironmentClass
        Value: !Ref EnvironmentClass
      - Key: ApplicationName
        Value: !Ref ApplicationName  




  EC2FleetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Allow access to EC2 from Load Balancers"
      SecurityGroupEgress:
      - IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"
      - IpProtocol: "tcp"
        FromPort: 443
        ToPort: 443
        CidrIp: "0.0.0.0/0"
      - IpProtocol: "tcp"
        FromPort: 1433
        ToPort: 1433
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress: #Lacks Access utilizing RDP/SSH/Direct IP
      - IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      - IpProtocol: "tcp"
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      - IpProtocol: "tcp"
        FromPort: 3389
        ToPort: 3389
        CidrIp: "10.0.0.0/8"    
      Tags:
        - Key: EnvironmentClass
          Value: !Ref EnvironmentClass
        - Key: ApplicationName
          Value: !Ref ApplicationName  
      VpcId: !Ref VPCId
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Allow access from the world to Load Balancers"
      SecurityGroupEgress:
      - IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"
      - IpProtocol: "tcp"
        FromPort: 443
        ToPort: 443
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: 443
        ToPort: 443
        CidrIp: "10.0.0.0/8"
      - IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
        CidrIp: "10.0.0.0/8"
      Tags:
        - Key: EnvironmentClass
          Value: !Ref EnvironmentClass 
        - Key: ApplicationName
          Value: !Ref ApplicationName       
      VpcId: !Ref VPCId

Outputs:
  EC2SecurityGroup: 
    Description: Security Group of the main compute processing fleet. 
    Value: !GetAtt EC2FleetSecurityGroup.GroupId
